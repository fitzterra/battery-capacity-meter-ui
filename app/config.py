"""
Application config.

This is the global config for all of the application.
This file will contain some sane defaults, but also some sensitive data or
secrets. The later type of settings should be set in a ``.env`` file.

The ``.env`` file in the app dir, or any found in any parent dir, will be parsed
and loaded via ``dotenv``. The config file will then set final values via the
`envOrDefault` function.
"""

import os

from typing import Any

from pathlib import Path
import dotenv

try:
    if not dotenv.load_dotenv():
        print("No .env file found to load. Using default configs.")
except Exception as exc:
    print(f"Error loading environment: {exc}")


def envOrDefault(key: str, default: Any = None, conv: callable = None) -> Any:
    """
    Function to return a config value from the environment, or default if not
    defined in the environment.

    By default environment variables will be string values. If the stored value
    in this config file should be any other type, the ``conv`` argument can be
    used to supply a callable that can be used to convert the string to another
    type.

    The callable should accept the string as only arg, and return the converted
    value.

    If the callable raises and error, the `default` value passed in will be
    used as the final value.

    Args:
        key: The name of the environment variable
        default: Default value to return if key is not set in the environment
        conv: If supplied this can be a callable that can be used to convert
            the environment string values to another type. See above.
    """
    # Get the value
    val = os.getenv(key, None)

    # We assume if we get a None, then the value does not exist, so we return
    # the default
    if val == None:
        return default

    # Need to convert?
    if callable(conv):
        try:
            val = conv(val)
        except Exception:
            # We return the default if the conversion raised and exception.
            val = default

    return val


### Serving the UI API docs
# The path to the api docs. This is generated by pydoctor
APP_DOCS_DIR = Path().absolute() / "doc/app-docs"
# This is the path relative to the root where the app API docs should be made
# available.
APP_DOCS_PATH = "app-docs"
# Whether the app docs should be mounted or not
MOUNT_APP_DOCS = True

# Static files path
STATIC_PATH = "static"

# Our favicon
FAVICON_PATH = "/static/icons8-charged-battery.gif"

# Pick up the app version from the VERSION file in the top level dir
try:
    with open("VERSION", "r", encoding="utf-8") as f:
        VERSION = f.readline().strip()
except Exception:  # pylint: disable=broad-exception-caught
    VERSION = "unknown"

# The Database config we get from the environment with the same names.
DB_HOST = envOrDefault("DB_HOST")
DB_PORT = envOrDefault("DB_PORT")
DB_USER = envOrDefault("DB_USER")
DB_PASS = envOrDefault("DB_PASS")
DB_NAME = envOrDefault("DB_NAME")
